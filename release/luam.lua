do local a=package.searchers or package.loaders;local b=a[2]a[2]=function(c)local d={["base64.lib"]=function()local e="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"local f={}local g={}for h=1,#e do local i=e:sub(h,h)f[h]=i;g[i]=h-1 end;local j,k,l=bit.blshift,bit.blogic_rshift,bit.band;local function m(n,o,p)assert(n,"At least one input byte required")local q=not o and 1 or not p and 2 or 3;o=o or 0;p=p or 0;local r=j(n,16)+j(o,8)+p;local s=""for h=3,3-q,-1 do s=s..f[1+tonumber(l(k(r,h*6),0x3f))]end;s=s..string.rep("=",3-q)return s end;local function u(v)assert(#v==4,"Chars must be of length 4")local w=#v:gsub("[^=]","")local x=v:gsub("=","A")local y=0;local s={}for h=1,4 do y=y+j(g[x:sub(h,h)],24-h*6)end;for h=1,3 do s[h]=l(k(y,24-h*8),0xff)end;return s,w end;local function z(c)assert(fs.exists(c),'File does not exist')local A=fs.open(c,"rb")local s=""for B=1,fs.getSize(c),3 do local n,o,p=A.read(),A.read(),A.read()s=s..m(n,o,p)end;return s end;local function C(D,E)assert(#D%4==0,"Coded string should be a multiple of 4")local F=fs.open(E,"wb")for h=1,#D,4 do local G,w=u(D:sub(h,h+3))for H=1,3-w do F.write(G[H])end end;F.close()end;local I={encodeFile=z,decodeFile=C}return I end,["functions.add"]=function()local J=require"functions.install.downloadFile"local K=require"functions.delete"require"functions.json"local function L(M)local N=M[2]local O=M[3]if not N then return"A name must be provided in order to add a package"end;local P=shell.dir()local Q=fs.combine(P,"package.json")local R={}if fs.exists(Q)then R=decodeFromFile(Q)end;if R and R.dependencies and R.dependencies[N]then K({0,N})end;local S=J(N,O)if not R.dependencies then R.dependencies={}end;R.dependencies[M[2]]="^"..S;local T=fs.open(Q,"w")T.write(encodePretty(R))end;return L end,["functions.versions"]=function()require"functions.json"local function U(O,V)local W,X,Y=O:match("(%d+)%.(%d+)%.(%d+)")W,X,Y=tonumber(W),tonumber(X),tonumber(Y)if V=="major"then return string.format("%d.0.0",W+1)elseif V=="minor"then return string.format("%d.%d.0",W,X+1)elseif V=="patch"then return string.format("%d.%d.%d",W,X,Y+1)else error("Invalid increment type: "..V)end end;local function Z(V)local P=shell.dir()local _=fs.combine(P,"package.json")if not fs.exists(_)then return"No package.json found!"end;local R=decodeFromFile(_)if not R["version"]then return"Must initialize package before incrementing version. Run luam init"end;local a0=U(R["version"],V or"patch")print(string.format("Updated to %s",a0))R["version"]=a0;local a1=fs.open(_,"w")a1.write(encodePretty(R))a1.close()return a0 end;return Z end,["functions.init"]=function()require"functions.json"local function a2(M)local P=shell.dir()if M[2]then P=P.."/"..M[2]end;local _=fs.combine(P,"package.json")local R={}if fs.exists(_)then R=decodeFromFile(_)end;if R["name"]then print("Package has already been initialized")end;local N=M[2]or P:match("([^/]+)$")local F=fs.open(_,"w")R["name"]=N;R["version"]="0.1.0"R["dependencies"]=R["dependencies"]or{}F.write(encodePretty(R))local a3=fs.open(fs.combine(P,".luamignore"),"w")a3.write("luam_modules\n")a3.write("package-lock.json")return string.format("Package %s has been initialized",N)end;return a2 end,["functions.login"]=function()local function a4(M)local a5=fs.open("luam.key","w")a5.write(M[2])a5.close()return"API token now in use"end;return a4 end,["functions.install.downloadFile"]=function()require"functions.json"local a6=require("tar.lib")local a7=require("base64.lib")local a8="https://api.luam.dev/packages/install"local function a9(aa,N,ab)local ac=aa.."/"..N..".tar"a7.decodeFile(ab,ac)a6.untar(ac,aa)fs.delete(ac)end;local function ad(table,ae)for B,af in ipairs(table)do if af==ae then return true end end;return false end;local function ag(ah)local ai={}for B,ae in ipairs(ah)do table.insert(ai,ae)end;return ai end;local function aj(ak,al,h,N)for H=1,h do ak=ak.."/luam_modules/"..al[H]end;if N then ak=ak.."/luam_modules/"..N end;return ak end;local function am(an)local ao=an:match(".*()/")return ao and an:sub(1,ao-1)or an end;local function ap(c,aq,ar,as)c=c.."/luam_modules/"..aq;while#c>0 do local x=as[c]if x and x.name==aq and x.version==ar then return c end;for h=1,3 do local at=c;c=am(c)if at==c then return false end end;c=c.."/"..aq end end;local function au(av,aw,as)local ax=""for c,x in pairs(as)do if x.name==av.name and x.version==av.version then ax=c end end;fs.copy(ax,aw)return ax end;local function L(ak,ay,as,az,aA)local aB={}local aC=ay[az][aA]aC.name=az;aC.version=aA;aC.options={}table.insert(aB,aC)for B,ae in ipairs(aB)do local N=ae.name;local O=ae.version;local al=ae.options;local aD=ag(al)table.insert(aD,N)for h=0,#al do local aw=aj(ak,al,h,N)if as[aw]and as[aw].version==O then break end;if not as[aw]then if ae.payload then a9(am(aw),N,ae.payload)as[aw]={name=ae.name,version=ae.version,dependencies=ae.dependencies}for aE,aF in pairs(ae.providedDependencyVersions)do local aG=nil;if ay[aE]and ay[aE][aF]then aG=ay[aE][aF]aG.name=aE;aG.version=aF else aG={name=aE,version=aF}end;aG.options=aD;table.insert(aB,aG)end else local aH=""if O then aH=au(ae,aw,as)else local aI=ap(ae.copied_from_path,N)aH=au(aI,aw,as)end;local aJ=as[aH]as[aw]=aJ;for aE,B in pairs(aJ.dependencies)do table.insert(aB,{options=aD,name=aE,copied_from_path=aH})end end;break end end end end;local function J(N,O)local P=shell.dir()local aK=fs.combine(P,"package-lock.json")local as={}if fs.exists(aK)then as=decodeFromFile(aK)or{}end;local aL={}for B,package in pairs(as)do local N=package.name;local O=package.version;if not aL[N]then aL[N]={}end;if not ad(aL[N],O)then table.insert(aL[N],O)end end;local aM=encode(aL)if aM=="[]"then aM="{}"end;local aN={["X-PackageName"]=N,["X-PackageVersion"]=O,["Content-Type"]="application/json"}local aO,aP,aQ=http.post(a8,aM,aN)if not aO then error(string.format("%s: %s",aP,aQ and aQ.readAll()))end;local aR=decode(aO.readAll())local S=O;for aS in pairs(aR[N])do S=aS end;L(P,aR,as,N,S)local aT=fs.open(aK,"w")aT.write(encodePretty(as))aT.close()local aU=0;for O,B in pairs(aR)do for package,B in pairs(aR[O])do aU=aU+1 end end;print(string.format("%s package%s installed",aU,aU>1 and"s"or""))return S end;return J end,["functions.post.encodeFile"]=function()local aV=require("tar.lib")local I=require("base64.lib")local function z(c,aW)assert(fs.exists(c),"File does not exist!")local aX="temp-"..math.floor(1000*math.random())..".tar"aV.tar(c,aX,aW)local aY=I.encodeFile(aX)fs.delete(aX)return aY end;return z end,["functions.json"]=function()local aZ={["\n"]="\\n",["\r"]="\\r",["\t"]="\\t",["\b"]="\\b",["\f"]="\\f",["\""]="\\\"",["\\"]="\\\\"}local function a_(t)local b0=0;for aS,b1 in pairs(t)do if type(aS)~="number"then return false elseif aS>b0 then b0=aS end end;return b0==#t end;local b2={['\n']=true,['\r']=true,['\t']=true,[' ']=true,[',']=true,[':']=true}function removeWhite(b3)while b2[b3:sub(1,1)]do b3=b3:sub(2)end;return b3 end;local function b4(b5,b6,b7,b8)local b3=""local function b9(ba)b3=b3 ..("\t"):rep(b7)..ba end;local function bb(b5,bc,bd,be,bf)b3=b3 ..bc;if b6 then b3=b3 .."\n"b7=b7+1 end;for aS,b1 in be(b5)do b9("")bf(aS,b1)b3=b3 ..","if b6 then b3=b3 .."\n"end end;if b6 then b7=b7-1 end;if b3:sub(-2)==",\n"then b3=b3:sub(1,-3).."\n"elseif b3:sub(-1)==","then b3=b3:sub(1,-2)end;b9(bd)end;if type(b5)=="table"then b8[b5]=true;if a_(b5)then bb(b5,"[","]",ipairs,function(aS,b1)b3=b3 ..b4(b1,b6,b7,b8)end)else bb(b5,"{","}",pairs,function(aS,b1)assert(type(aS)=="string","JSON object keys must be strings",2)b3=b3 ..b4(aS,b6,b7,b8)b3=b3 ..(b6 and": "or":")..b4(b1,b6,b7,b8)end)end elseif type(b5)=="string"then b3='"'..b5:gsub("[%c\"\\]",aZ)..'"'elseif type(b5)=="number"or type(b5)=="boolean"then b3=tostring(b5)else error("JSON only supports arrays, objects, numbers, booleans, and strings",2)end;return b3 end;function encode(b5)return b4(b5,false,0,{})end;function encodePretty(b5)return b4(b5,true,0,{})end;local bg={}for aS,b1 in pairs(aZ)do bg[b1]=aS end;function parseBoolean(b3)if b3:sub(1,4)=="true"then return true,removeWhite(b3:sub(5))else return false,removeWhite(b3:sub(6))end end;function parseNull(b3)return nil,removeWhite(b3:sub(5))end;local bh={['e']=true,['E']=true,['+']=true,['-']=true,['.']=true}function parseNumber(b3)local h=1;while bh[b3:sub(h,h)]or tonumber(b3:sub(h,h))do h=h+1 end;local b5=tonumber(b3:sub(1,h-1))b3=removeWhite(b3:sub(h))return b5,b3 end;function parseString(b3)b3=b3:sub(2)local ba=""while b3:sub(1,1)~="\""do local bi=b3:sub(1,1)b3=b3:sub(2)assert(bi~="\n","Unclosed string")if bi=="\\"then local bj=b3:sub(1,1)b3=b3:sub(2)bi=assert(bg[bi..bj],"Invalid escape character")end;ba=ba..bi end;return ba,removeWhite(b3:sub(2))end;function parseArray(b3)b3=removeWhite(b3:sub(2))local b5={}local h=1;while b3:sub(1,1)~="]"do local b1=nil;b1,b3=parseValue(b3)b5[h]=b1;h=h+1;b3=removeWhite(b3)end;b3=removeWhite(b3:sub(2))return b5,b3 end;function parseObject(b3)b3=removeWhite(b3:sub(2))local b5={}while b3:sub(1,1)~="}"do local aS,b1=nil,nil;aS,b1,b3=parseMember(b3)b5[aS]=b1;b3=removeWhite(b3)end;b3=removeWhite(b3:sub(2))return b5,b3 end;function parseMember(b3)local aS=nil;aS,b3=parseValue(b3)local b5=nil;b5,b3=parseValue(b3)return aS,b5,b3 end;function parseValue(b3)local bk=b3:sub(1,1)if bk=="{"then return parseObject(b3)elseif bk=="["then return parseArray(b3)elseif tonumber(bk)~=nil or bh[bk]then return parseNumber(b3)elseif b3:sub(1,4)=="true"or b3:sub(1,5)=="false"then return parseBoolean(b3)elseif bk=="\""then return parseString(b3)elseif b3:sub(1,4)=="null"then return parseNull(b3)end;return nil end;function decode(b3)b3=removeWhite(b3)t=parseValue(b3)return t end;function decodeFromFile(c)local bl=assert(fs.open(c,"r"))local bm=decode(bl.readAll())bl.close()return bm end end,["functions.delete.deletePackage"]=function()local function am(an)local ao=an:match(".*()/")return ao and an:sub(1,ao-1)or an end;local function bn(bo,bp,bq,as)bq=bq.."/luam_modules/"..bo;while bq~=bp do if as[bq]then return false end;for B=1,3 do bq=am(bq)end;bq=bq.."/"..bo end;return true end;local function ap(c,aq,as)c=c.."/luam_modules/"..aq;while#c>0 do local x=as[c]if x then return c end;for h=1,3 do local at=c;c=am(c)if at==c then return end end;c=c.."/"..aq end end;local function br(ah,bs)for aS,B in pairs(ah)do if aS==bs then return true end end;return false end;local function bt(N,c,as)for Q,av in pairs(as)do if br(av.dependencies,N)then print(av.name)if bn(N,c,Q,as)then return end end end;local x=as[c]local bu=x.dependencies;fs.delete(c)as[c]=nil;for bv in pairs(as)do if bv:sub(1,#c)==c then as[bv]=nil end end;for aE in pairs(bu)do local bw=ap(c,aE,as)if bw then bt(aE,bw,as)end end end;return bt end,["functions.post"]=function()local z=require("functions.post.encodeFile")local bx=require("functions.versions")require("functions.json")local by="https://api.luam.dev/packages"local function bz(R)local bA={"name","version","dependencies"}for B,bB in ipairs(bA)do if not R[bB]then error(string.format('Required field "%s" missing from package.json',bB))end end;local bC=fs.open(string.format(".luamversioncache/%s",R.name),"r")if bC then local O=bC.readAll()if O==R["version"]then local a0=bx("patch")R["version"]=a0 end end end;local function bD()local P=shell.dir()local _=fs.combine(P,"package.json")if not fs.exists('luam.key')then return'No api token found. Run luam login and provide a valid api token.'end;local bE=fs.open("luam.key","r").readAll()if not fs.exists(_)then return'"package.json" not found. Run "luam init" to initialize package.'end;local R=decodeFromFile(_)bz(R)local bF=fs.combine(P,".luamignore")local bG={}if fs.exists(bF)then local bH=fs.open(bF,"r")local bI="temp"while bI do bI=bH.readLine()if not bI then break end;table.insert(bG,P.."/"..bI)end end;local bJ=z(P,bG)local bK={name=R.name,version=R.version,dependencies=R.dependencies,payload=bJ}local bC=fs.open(".luamversioncache".."/"..R.name,"w")bC.write(R.version)bC.close()local aO,bL,bM=http.post(by,encode(bK),{Authorization=bE})if not aO then if not bM then return"The request timed out. Either luam is down or it is blocked on your network"end;return string.format("%s: %s",bL,decode(bM.readAll()).message or"No message provided")end;return string.format("%s v%s was posted successfully!",R.name,R.version)end;return bD end,["functions.help"]=function()local function bN(M)print("No help yet! This feature is coming extremely soon though.")end;return bN end,["functions.delete"]=function()require"functions.json"require"functions.delete.deletePackage"local bt=require"functions.delete.deletePackage"local function K(M)local P=shell.dir()local bO=M[2]if not bO then return end;local _=fs.combine(P,"package.json")if not _ then return"No package.json found."end;local R=decodeFromFile(_)if not R.dependencies then return"No dependencies to delete"end;if not R.dependencies[bO]then return string.format("%s not found. Perhaps you made a typo?",bO)end;R.dependencies[bO]=nil;local aK=fs.combine(P,"package-lock.json")local as={}if fs.exists(_)then as=decodeFromFile(aK)end;local bP=P.."/luam_modules/"..bO;if not fs.exists(bP)then return string.format("%s not found",bP)end;bt(bO,bP,as)local T=fs.open(_,"w")T.write(encodePretty(R))T.close()local aT=fs.open(aK,"w")aT.write(encodePretty(as))aT.close()end;return K end,["tar.lib"]=function()local bQ=true;local bR="000755 \0"local bS=string.rep("\0",32)local bT=bS;local bU=string.rep("\0",100)local bV="000000 \0"local bW=bV;local bX=bV;local bY=bW;local bZ="0"local b_="5"local c0="00"local c1="ustar\0"local c2=string.rep(" ",8)local c3=string.rep("\0",512)local function c4(string,c5,i)i=i or"0"if#string>=c5 then return string end;return string.rep(i,c5-#string)..string end;local function c6(string,c5,i)i=i or"0"if#string>=c5 then return string end;return string..string.rep(i,c5-#string)end;local function c7(c8)return string.format("%o",c8)end;local function c9(ca)local cb=0;for i in string.gmatch(ca,".")do cb=cb+string.byte(i)end;return string.format("%06s",c7(cb)).."\0 "end;local function cc(aa,c)local cd=aa.."/"..c;assert(fs.exists(cd),"The file path "..cd.." does not exist")local ce=fs.isDir(cd)and b_ or bZ;local cf=c4(c7(fs.getSize(cd)),11,0).." "local cg=c4(c7(os.date("%s")),11).." "local N,ch;if#c>100 then ch=string.sub(c,1,155)N=c6(string.sub(c,156,255),100,"\0")else N=c6(c,100,"\0")ch=string.rep("\0",155)end;local ci=N..bR..bX..bY..cf..cg;local cj=ce..bU..c1 ..c0 ..bS..bT..bV..bW..ch;local cb=c9(ci..c2 ..cj)return c6(ci..cb..cj,512,"\0")end;local function ck(ca,cl)for h=1,#ca do cl.write(string.byte(ca,h))end end;local function z(aa,c,cl)local cd=aa.."/"..c;assert(fs.exists(cd))local ca=cc(aa,c)ck(ca,cl)local cf=fs.getSize(cd)local w=0;if not fs.isDir(cd)then w=512-cf%512 end;local A=fs.open(cd,"rb")for B=1,cf do cl.write(A.read())end;for B=1,w do cl.write(0)end end;local function cm(cl)for B=1,1024 do cl.write(0)end;cl.close()end;local function ad(cn,ae)for B,af in ipairs(cn)do if af==ae then return true end end;return false end;local function co(aa,cp,cq,F,cr)local cs=aa.."/"..cp;if ad(cq,cs)then return end;if not fs.isDir(cs)then z(aa,cp,F)return else if#fs.list(cs)==0 then z(aa,cp,F)end end;for B,ct in ipairs(fs.list(cs))do if bQ and string.sub(ct,1,1)~="."or not bQ then local cu=cp.."/"..ct;local cv=aa.."/"..cu;if fs.isDir(cv)then co(aa,cu,cq,F,cr)elseif cv~=cr then if not ad(cq,cv)then z(aa,cu,F)end end end end end;local function a6(c,s,cq,F)assert(c,"No path was provided")if s then assert(string.sub(s,-4)==".tar","Output file path must end with .tar!")end;local aa,cw=string.match(c,"(.-)/([^/]+)$")aa=aa or""cw=cw or c;s=s or"/"..aa.."/"..cw..".tar"F=F or fs.open(s,"wb")co(aa,cw,cq,F,s)cm(F)end;local function cx(ca,cy,cz)local cA=ca:sub(cy,cz):gsub("\0","")cA=cA:gsub("^%s+","")cA=cA:gsub("%s+$","")return cA end;local function cB(ca)local N=cx(ca,1,100)local ch=cx(ca,345,500)local cf=tonumber(cx(ca,124,136),8)local type=tonumber(cx(ca,156,157))return N,ch,cf,type end;local function cC(E,cf,A)local F=fs.open(E,"wb")for B=1,cf do F.write(A.read())end;local w=512-cf%512;if w~=512 then for B=1,w do A.read()end end;F.close()end;local function cD(c,E)E=E or shell.dir()assert(fs.exists(c))assert(string.sub(c,-4)==".tar","File is not a tar file")assert(fs.getSize(c)%512==0,"File size is not a multiple of 512. Invalid tar.")local A=fs.open(c,"rb")for B=1,fs.getSize(c)/512-1 do local ca=A.read(512)if ca==nil then return end;if ca~=c3 then local N,ch,cf,type=cB(ca)local cE=E.."/"..(ch and ch..N or N)if type==5 then fs.makeDir(cE)else if not fs.exists(cE)then cC(cE,cf,A)else for h=1,512 do A.read()end end end end end end;local aV={tar=a6,untar=cD}return aV end}if d[c]then return d[c]else return b(c)end end end;local M={...}if M[1]~=".luam"then local a2=require"functions.init"local bD=require"functions.post"local cF=require"functions.add"local a4=require"functions.login"local K=require"functions.delete"local bx=require"functions.versions"local bN=require"functions.help"local cG={init=a2,post=bD,add=cF,a=cF,delete=K,d=K,login=a4,help=bN,patch=function()bx("patch")end,minor=function()bx("minor")end,major=function()bx("major")end}local cy=os.clock()local cH,aO=pcall(function()if not M[1]then error("At least one argument expected.")end;if not cG[M[1]]then error(string.format("%s is not a valid command",M[1]))end;local aO=cG[M[1]](M)return aO end)if not cH then print("Error!")end;if aO then print(aO)end;print(string.format("Finished in %0.3f seconds",os.clock()-cy))else local function cI(b3,cJ)local aO={}for cK in(b3 ..cJ):gmatch("(.-)"..cJ)do table.insert(aO,cK)end;return aO end;local cL=require;local function cM(cN,cO)while#cN>0 do local c=table.concat(cN,"/").."/luam_modules/"..cO;local cP,cQ=pcall(cL,c:gsub("/","."))if cP then return cQ end;table.remove(cN)table.remove(cN)end end;function require(cO)local cR=debug.getinfo(2,"S")local c=cR.source:sub(2)c=c:match("(.*/)")or""c=c:sub(1,#c-1)local cN=cI(c,"/")local cQ=cM(cN,cO)if cQ then return cQ end;return cL(cO)end end
